// INDIA VIOLENCE TRACKER - UNIQUE VERSION: 2024-06-07-VERIFY-HTML
// Force update for GitHub Pages deployment
// Data manager module
import Papa from 'https://cdn.jsdelivr.net/npm/papaparse@5.4.1/+esm';

// Google Sheets published CSV URL (from public_json_data sheet)
const SHEET_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQYLP4l0USAayIafvxTcDTzgVyktdJOOVnqJIbC4zW8zANSGsJr71QLpxHEW9MIeBQ8qm8qL-zUdRvW/pub?gid=1466869679&single=true&output=csv";
const SHEET_PROXY = "https://corsproxy.io/?"; // Changed to a more reliable CORS proxy

// Field mapping from CSV headers to JS properties
const FIELD_MAP = {
    'headline': 'title',
    'location': 'location_summary',
    'date_of_incident': 'incident_date',
    'incident_type': 'incident_type',
    'victim_group': 'victim_group',
    'state': 'state',
    'district': 'district',
    'latitude': 'lat',
    'longitude': 'lon',
    'source_url': 'source_url',
    'source_name': 'source_name'
};

class DataManager {
    constructor() {
        this.incidents = [];
        this.lastUpdated = null;
        this.stats = {
            weeklyCount: 0,
            monthlyCount: 0,
            mappableCount: 0,
            topStates: [],
            mostAffectedState: 'N/A'
        };
        this.loading = false;
        this.error = null;
        this.useMockData = false; // Disabled mock data for production
    }

    async fetchData() {
        if (this.loading) {
            console.warn('[fetch] Already loading data, skipping...');
            return false;
        }
        
        this.loading = true;
        this.error = null;
        
        try {
            console.info('[fetch] Starting data fetch...');
            console.time('[fetch] Total fetch time');
            
            // Show loading state
            document.getElementById('loader')?.classList.remove('hidden');
            document.getElementById('errorBanner')?.classList.add('hidden');
            
            // Try direct fetch first
            console.info('[fetch] Attempting direct fetch from:', SHEET_URL);
            let response = await fetch(SHEET_URL, { 
                mode: 'cors',
                cache: 'no-cache' // Disable caching
            });
            
            // If CORS fails, use proxy
            if (!response.ok) {
                console.warn('[fetch] Direct fetch failed:', response.status, response.statusText);
                console.info('[fetch] Trying CORS proxy...');
                const proxyUrl = SHEET_PROXY + encodeURIComponent(SHEET_URL);
                console.info('[fetch] Proxy URL:', proxyUrl);
                response = await fetch(proxyUrl, { cache: 'no-cache' });
            }
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
            }
            
            console.info('[fetch] Response status:', response.status);
            console.info('[fetch] Content type:', response.headers.get('content-type'));
            
            const csvText = await response.text();
            console.info('[fetch] Received CSV data length:', csvText.length);
            
            console.time('[parse] CSV parsing');
            const { data, errors } = Papa.parse(csvText, {
                header: true,
                skipEmptyLines: true,
                transformHeader: header => header.trim().toLowerCase()
            });
            console.timeEnd('[parse] CSV parsing');
            
            if (errors.length) {
                console.warn('[parse] CSV parsing errors:', errors);
            }
            
            console.info('[parse] Parsed rows:', data.length);
            
            // Map fields and clean data
            console.time('[parse] Data processing');
            
            // Count processing statistics
            let totalRows = data.length;
            let validCoordinates = 0;
            let missingCoordinates = 0;
            let invalidCoordinates = 0;
            
            // Enhanced processing with retry logic for invalid coordinates
            let processedIncidents = [];
            
            for (let i = 0; i < data.length; i++) {
                const row = data[i];
                const incident = {};
                
                // Map fields from CSV to internal representation
                Object.entries(FIELD_MAP).forEach(([oldKey, newKey]) => {
                    if (row[oldKey] !== undefined) {
                        incident[newKey] = row[oldKey].trim();
                    }
                });
                
                // Process and validate coordinates
                const processedIncident = this.processCoordinates(incident, i, row);
                
                // Only keep incidents with victim_group (mandatory field)
                if (processedIncident && processedIncident.victim_group) {
                    processedIncidents.push(processedIncident);
                    
                    // Count for statistics
                    if (processedIncident.lat !== null && processedIncident.lon !== null) {
                        validCoordinates++;
                    } else {
                        missingCoordinates++;
                    }
                } else {
                    invalidCoordinates++;
                }
            }
            
            this.incidents = processedIncidents;
            
            // Log detailed statistics
            console.info(`[parse] Processing statistics:
                Total rows: ${totalRows}
                Valid incidents with coordinates: ${validCoordinates}
                Valid incidents without coordinates: ${missingCoordinates}
                Invalid incidents (filtered out): ${invalidCoordinates}
                Total incidents kept: ${this.incidents.length}
            `);
            
            console.timeEnd('[parse] Data processing');
            
            this.lastUpdated = new Date();
            this.updateStats();
            
            console.timeEnd('[fetch] Total fetch time');
            console.info('[fetch] Data fetch completed successfully');
            
            // Show warning if no valid coordinates
            if (validCoordinates === 0 && this.incidents.length > 0) {
                console.error('[fetch] WARNING: No incidents have valid coordinates! Map will be empty.');
                document.getElementById('errorBanner').textContent = 'Warning: No mappable incidents found. The map will be empty.';
                document.getElementById('errorBanner')?.classList.remove('hidden');
            }
            
            return true;
            
        } catch (error) {
            console.error('[fetch] Error fetching data:', error);
            this.error = error.message;
            document.getElementById('errorBanner').textContent = `Error loading data: ${error.message}`;
            document.getElementById('errorBanner')?.classList.remove('hidden');
            return false;
        } finally {
            this.loading = false;
            document.getElementById('loader')?.classList.add('hidden');
            console.info('[fetch] Loading state cleared');
        }
    }

    getMockData() {
        // Mock data for development and testing
        const mockIncidents = [];
        const states = ['Delhi', 'Maharashtra', 'Karnataka', 'Tamil Nadu', 'West Bengal', 'Gujarat', 'Rajasthan', 'Uttar Pradesh'];
        const victimGroups = ['Dalit', 'Adivasi', 'Muslim', 'Christian', 'Sikh', 'Other Minority'];
        const incidentTypes = ['Physical Violence', 'Verbal Abuse', 'Discrimination', 'Property Damage', 'Social Boycott'];
        const policeActions = ['FIR Filed', 'Investigation Ongoing', 'No Action', 'Case Closed', 'Arrest Made'];
        
        // Generate 50 mock incidents
        for (let i = 0; i < 50; i++) {
            const date = new Date();
            date.setDate(date.getDate() - Math.floor(Math.random() * 90)); // Last 90 days
            
            const state = states[Math.floor(Math.random() * states.length)];
            const victimGroup = victimGroups[Math.floor(Math.random() * victimGroups.length)];
            const incidentType = incidentTypes[Math.floor(Math.random() * incidentTypes.length)];
            
            mockIncidents.push({
                incident_id: `INC_${String(i + 1).padStart(3, '0')}`,
                title: `${incidentType} incident reported in ${state}`,
                summary: `A case of ${incidentType.toLowerCase()} against a ${victimGroup} person was reported. Local authorities have been notified.`,
                incident_date: date.toISOString().split('T')[0],
                published_at: date.toISOString(),
                location_summary: `Near ${state} City Center`,
                district: `District ${i + 1}`,
                state: state,
                lat: 20 + Math.random() * 15, // India latitude range
                lon: 68 + Math.random() * 30, // India longitude range
                victim_group: victimGroup,
                incident_type: incidentType,
                alleged_perp: 'Unknown',
                police_action: policeActions[Math.floor(Math.random() * policeActions.length)],
                source_url: `https://example.com/news/${i}`,
                source_name: `News Source ${Math.floor(Math.random() * 5) + 1}`,
                rss_feed_id: `feed_${Math.floor(Math.random() * 5)}`,
                confidence_score: Math.random() < 0.3 ? 'Low' : Math.random() < 0.7 ? 'Medium' : 'High',
                verified_manually: Math.random() < 0.3 ? 'TRUE' : 'FALSE'
            });
        }
        
        return {
            lastUpdated: new Date().toISOString(),
            totalIncidents: mockIncidents.length,
            data: mockIncidents
        };
    }

    updateStats() {
        console.time('[stats] Update statistics');
        const now = new Date();
        const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

        // Count incidents by time period using new field names
        this.stats.weeklyCount = this.incidents.filter(incident => {
            const incidentDate = new Date(incident.incident_date || incident.published_at);
            return incidentDate >= oneWeekAgo;
        }).length;

        this.stats.monthlyCount = this.incidents.filter(incident => {
            const incidentDate = new Date(incident.incident_date || incident.published_at);
            return incidentDate >= oneMonthAgo;
        }).length;

        // Count incidents with valid coordinates
        this.stats.mappableCount = this.incidents.filter(incident => 
            incident.lat !== null && incident.lon !== null &&
            !isNaN(parseFloat(incident.lat)) && !isNaN(parseFloat(incident.lon))
        ).length;

        // Find most affected states (top 5)
        const stateCounts = {};
        this.incidents.forEach(incident => {
            if (incident.state) {
                const normalizedState = incident.state.trim();
                if (normalizedState) {
                    stateCounts[normalizedState] = (stateCounts[normalizedState] || 0) + 1;
                }
            }
        });

        // Sort states by incident count (descending)
        const sortedStates = Object.entries(stateCounts)
            .sort(([,a], [,b]) => b - a);
        
        // Get top 5 states
        this.stats.topStates = sortedStates.slice(0, 5).map(([state, count]) => ({
            state,
            count
        }));

        // For backward compatibility
        this.stats.mostAffectedState = sortedStates.length > 0 ? sortedStates[0][0] : 'N/A';
        
        // Calculate percentage of mappable incidents
        const mappablePercentage = this.incidents.length > 0 
            ? Math.round((this.stats.mappableCount / this.incidents.length) * 100) 
            : 0;
        
        console.info(`[stats] Updated: ${this.incidents.length} total incidents, ${this.stats.mappableCount} mappable (${mappablePercentage}%)`);
        console.timeEnd('[stats] Update statistics');
        
        // Update UI elements with stats
        this.updateStatsUI();
    }
    
    // New method to update UI elements with stats
    updateStatsUI() {
        try {
            // Update counter elements
            const totalCountElement = document.getElementById('totalCount');
            if (totalCountElement) {
                totalCountElement.textContent = this.incidents.length.toString();
            }
            
            const mappableCountElement = document.getElementById('mappableCount');
            if (mappableCountElement) {
                mappableCountElement.textContent = this.stats.mappableCount.toString();
            }
            
            const weeklyCountElement = document.getElementById('weeklyCount');
            if (weeklyCountElement) {
                weeklyCountElement.textContent = this.stats.weeklyCount.toString();
            }
            
            const monthlyCountElement = document.getElementById('monthlyCount');
            if (monthlyCountElement) {
                monthlyCountElement.textContent = this.stats.monthlyCount.toString();
            }
            
            // Update most affected state
            const mostAffectedStateElement = document.getElementById('mostAffectedState');
            if (mostAffectedStateElement && this.stats.topStates.length > 0) {
                mostAffectedStateElement.textContent = this.stats.topStates[0].state;
            }
            
            // Update last updated timestamp
            const lastUpdatedElement = document.getElementById('lastUpdated');
            if (lastUpdatedElement && this.lastUpdated) {
                const options = { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                };
                lastUpdatedElement.textContent = this.lastUpdated.toLocaleDateString(undefined, options);
            }
            
            // Update footer timestamp if it exists
            const footerLastUpdated = document.getElementById('footer-last-updated');
            if (footerLastUpdated && this.lastUpdated) {
                const options = { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric'
                };
                footerLastUpdated.textContent = this.lastUpdated.toLocaleDateString(undefined, options);
            }
        } catch (error) {
            console.error('[stats] Error updating UI with stats:', error);
        }
    }

    getStats() {
        return {
            ...this.stats,
            totalCount: this.incidents.length,
            mappableCount: this.stats.mappableCount || 0,
            topStates: this.stats.topStates || [],
            lastUpdated: this.lastUpdated
        };
    }

    getIncidents() {
        return this.incidents;
    }

    getFilteredIncidents(filters = {}) {
        return this.incidents.filter(incident => {
            if (filters.search && !this.matchesSearch(incident, filters.search)) {
                return false;
            }
            if (filters.state && incident.state !== filters.state) {
                return false;
            }
            if (filters.victimGroup && incident.victim_group !== filters.victimGroup) {
                return false;
            }
            if (filters.incidentType && incident.incident_type !== filters.incidentType) {
                return false;
            }
            if (filters.dateFrom) {
                const incidentDate = new Date(incident.incident_date || incident.published_at);
                const fromDate = new Date(filters.dateFrom);
                if (incidentDate < fromDate) {
                    return false;
                }
            }
            if (filters.dateTo) {
                const incidentDate = new Date(incident.incident_date || incident.published_at);
                const toDate = new Date(filters.dateTo);
                if (incidentDate > toDate) {
                    return false;
                }
            }
            return true;
        });
    }

    matchesSearch(incident, searchTerm) {
        const searchLower = searchTerm.toLowerCase();
        return (
            (incident.title && incident.title.toLowerCase().includes(searchLower)) ||
            (incident.summary && incident.summary.toLowerCase().includes(searchLower)) ||
            (incident.district && incident.district.toLowerCase().includes(searchLower)) ||
            (incident.state && incident.state.toLowerCase().includes(searchLower)) ||
            (incident.victim_group && incident.victim_group.toLowerCase().includes(searchLower)) ||
            (incident.incident_type && incident.incident_type.toLowerCase().includes(searchLower)) ||
            (incident.alleged_perp && incident.alleged_perp.toLowerCase().includes(searchLower))
        );
    }

    getUniqueStates() {
        return [...new Set(this.incidents
            .filter(incident => incident.state)
            .map(incident => incident.state)
        )].sort();
    }

    getUniqueVictimGroups() {
        return [...new Set(this.incidents
            .filter(incident => incident.victim_group)
            .map(incident => incident.victim_group)
        )].sort();
    }

    getUniqueIncidentTypes() {
        return [...new Set(this.incidents
            .filter(incident => incident.incident_type)
            .map(incident => incident.incident_type)
        )].sort();
    }

    processCoordinates(incident, index, rawRow) {
        console.debug(`[parse] Row ${index}: Processing coordinates for incident: ${incident.title}`);
        
        // Enhanced function to clean coordinate values
        const cleanValue = (val) => {
            if (val === undefined || val === null) return null;
            
            // Convert to string and clean
            let clean = String(val).trim();
            
            // Handle special cases
            if (clean === '' || clean === '0' || clean.toLowerCase() === 'null' || clean.toLowerCase() === 'undefined') {
                return null;
            }
            
            // Remove any non-numeric chars except dot and minus sign
            // First replace comma with dot for decimal separator
            clean = clean.replace(/,/g, '.');
            
            // Remove any quotes, parentheses, or other non-numeric characters
            clean = clean.replace(/[^\d.-]/g, '');
            
            return clean;
        };
        
        // Expanded India bounds check to be more lenient
        // Normal India: ~6° to 37°N, ~68° to 98°E
        // Extended bounds for neighbor areas and minor errors
        const isWithinExtendedBounds = (lat, lon) => {
            // More lenient bounds (includes neighboring countries)
            return lat >= 5 && lat <= 40 && lon >= 65 && lon <= 100;
        };
        
        // Try to extract valid coordinates
        let latRaw = incident.lat;
        let lonRaw = incident.lon;
        
        // Debug raw values
        console.debug(`[parse] Row ${index}: Raw values - lat=${latRaw}, lon=${lonRaw}, types: lat=${typeof latRaw}, lon=${typeof lonRaw}`);
        
        // Clean and prepare values
        let latClean = cleanValue(latRaw);
        let lonClean = cleanValue(lonRaw);
        
        // Debug after cleaning
        console.debug(`[parse] Row ${index}: Cleaned values - lat=${latClean}, lon=${lonClean}`);
        
        // Convert to numbers
        let latNum = latClean !== null ? parseFloat(latClean) : null;
        let lonNum = lonClean !== null ? parseFloat(lonClean) : null;
        
        // Debug after parsing
        console.debug(`[parse] Row ${index}: Parsed values - lat=${latNum}, lon=${lonNum}, valid: lat=${!isNaN(latNum) && latNum !== null}, lon=${!isNaN(lonNum) && lonNum !== null}`);
        
        // Check if values are valid numbers
        const isLatValid = latNum !== null && !isNaN(latNum) && isFinite(latNum);
        const isLonValid = lonNum !== null && !isNaN(lonNum) && isFinite(lonNum);
        
        // Try to handle different cases and recover coordinates
        if (isLatValid && isLonValid) {
            // Both values are valid numbers
            
            // Check if they're within expanded India bounds
            if (isWithinExtendedBounds(latNum, lonNum)) {
                // Standard case: valid coordinates in expected range
                incident.lat = latNum;
                incident.lon = lonNum;
                console.info(`[parse] Row ${index}: Valid coordinates: [${latNum}, ${lonNum}] for: ${incident.title}`);
            }
            // Check if coordinates might be swapped
            else if (isWithinExtendedBounds(lonNum, latNum)) {
                // Fix swapped coordinates
                incident.lat = lonNum;
                incident.lon = latNum;
                console.info(`[parse] Row ${index}: Fixed swapped coordinates: [${lonNum}, ${latNum}] for: ${incident.title}`);
            }
            // Accept coordinates outside bounds but with warning
            else {
                // Accept but warn about unusual coordinates
                incident.lat = latNum;
                incident.lon = lonNum;
                console.warn(`[parse] Row ${index}: Unusual coordinates outside India bounds: [${latNum}, ${lonNum}] for: ${incident.title}, but accepting them`);
            }
        }
        // Handle case where only one coordinate is valid
        else if (isLatValid && !isLonValid) {
            // Only latitude is valid
            if (isWithinExtendedBounds(latNum, 78)) { // Use approximate center longitude for India
                // Try to estimate a reasonable longitude (center of India as fallback)
                console.warn(`[parse] Row ${index}: Only lat ${latNum} is valid, using estimated lon for: ${incident.title}`);
                incident.lat = latNum;
                incident.lon = 78.9629; // Approximate central longitude for India
            } else {
                console.warn(`[parse] Row ${index}: Invalid lat/lon combination: lat=${latNum}, lon=${lonRaw}`);
                incident.lat = null;
                incident.lon = null;
            }
        }
        else if (!isLatValid && isLonValid) {
            // Only longitude is valid
            if (isWithinExtendedBounds(20.5, lonNum)) { // Use approximate center latitude for India
                // Try to estimate a reasonable latitude (center of India as fallback)
                console.warn(`[parse] Row ${index}: Only lon ${lonNum} is valid, using estimated lat for: ${incident.title}`);
                incident.lat = 20.5937; // Approximate central latitude for India
                incident.lon = lonNum;
            } else {
                console.warn(`[parse] Row ${index}: Invalid lat/lon combination: lat=${latRaw}, lon=${lonNum}`);
                incident.lat = null;
                incident.lon = null;
            }
        }
        // Fallback case - set to null if we couldn't recover coordinates
        else {
            console.warn(`[parse] Row ${index}: No valid coordinates could be extracted: lat=${latRaw}, lon=${lonRaw}`);
            
            // As a last resort, try to use district/state info to estimate coordinates
            if (incident.state && typeof incident.state === 'string') {
                const stateCoordinates = this.getStateCoordinates(incident.state);
                if (stateCoordinates) {
                    incident.lat = stateCoordinates.lat;
                    incident.lon = stateCoordinates.lon;
                    console.info(`[parse] Row ${index}: Using state coordinates for ${incident.state}: [${incident.lat}, ${incident.lon}]`);
                } else {
                    incident.lat = null;
                    incident.lon = null;
                }
            } else {
                incident.lat = null;
                incident.lon = null;
            }
        }
        
        return incident;
    }
    
    // Helper method to get approximate coordinates for Indian states
    getStateCoordinates(stateName) {
        if (!stateName) return null;
        
        const stateMap = {
            'delhi': { lat: 28.7041, lon: 77.1025 },
            'maharashtra': { lat: 19.7515, lon: 75.7139 },
            'karnataka': { lat: 15.3173, lon: 75.7139 },
            'tamil nadu': { lat: 11.1271, lon: 78.6569 },
            'west bengal': { lat: 22.9868, lon: 87.8550 },
            'gujarat': { lat: 22.2587, lon: 71.1924 },
            'rajasthan': { lat: 27.0238, lon: 74.2179 },
            'uttar pradesh': { lat: 26.8467, lon: 80.9462 },
            'madhya pradesh': { lat: 22.9734, lon: 78.6569 },
            'bihar': { lat: 25.0961, lon: 85.3131 },
            'andhra pradesh': { lat: 15.9129, lon: 79.7400 },
            'telangana': { lat: 18.1124, lon: 79.0193 },
            'odisha': { lat: 20.9517, lon: 85.0985 },
            'kerala': { lat: 10.8505, lon: 76.2711 },
            'jharkhand': { lat: 23.6102, lon: 85.2799 },
            'assam': { lat: 26.2006, lon: 92.9376 },
            'punjab': { lat: 31.1471, lon: 75.3412 },
            'chhattisgarh': { lat: 21.2787, lon: 81.8661 },
            'haryana': { lat: 29.0588, lon: 76.0856 },
            'uttarakhand': { lat: 30.0668, lon: 79.0193 },
            'jammu and kashmir': { lat: 33.7782, lon: 76.5762 },
            'himachal pradesh': { lat: 31.1048, lon: 77.1734 },
            'goa': { lat: 15.2993, lon: 74.1240 },
            'tripura': { lat: 23.9408, lon: 91.9882 },
            'meghalaya': { lat: 25.4670, lon: 91.3662 },
            'manipur': { lat: 24.6637, lon: 93.9063 },
            'nagaland': { lat: 26.1584, lon: 94.5624 },
            'arunachal pradesh': { lat: 28.2180, lon: 94.7278 },
            'sikkim': { lat: 27.5330, lon: 88.5122 },
            'mizoram': { lat: 23.1645, lon: 92.9376 }
        };
        
        // Normalize state name for lookup
        const normalizedStateName = stateName.toLowerCase().trim();
        
        // Exact match
        if (stateMap[normalizedStateName]) {
            return stateMap[normalizedStateName];
        }
        
        // Partial match (in case state name has variations)
        for (const [key, coords] of Object.entries(stateMap)) {
            if (normalizedStateName.includes(key) || key.includes(normalizedStateName)) {
                return coords;
            }
        }
        
        return null;
    }
}

// Create and export a singleton instance
const dataManager = new DataManager();

// Export the instance as default
export default dataManager;